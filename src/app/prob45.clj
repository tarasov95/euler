(ns app.prob45
  (:require
   [lib.numb :as numb]))

;; https://projecteuler.net/problem=45

;; Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
;; Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
;; Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
;; Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
;; It can be verified that T285 = P165 = H143 = 40755.
;; Find the next triangle number that is also pentagonal and hexagonal.

;; The nth pentagonal number is one third of the (3n − 1)th triangular number. 
;; Every hexagonal number is a triangular number, but only every other triangular number (the 1st, 3rd, 5th, 7th, etc.) is a hexagonal number. 

;; t(t+1)/2 = p(3p−1)/2 = h(2h−1)
;; TODO: can skip checking for T since (Every hexagonal number is a triangular number)
;; see also: https://en.wikipedia.org/wiki/Diophantine_equation

(defn T [n]
  (/ (* n (inc n)) 2))

(defn P [n]
  (/ (* n (dec (* 3 n))) 2))

(defn H [n]
  (* n (dec (* 2 n))))

(defn p-index [x]
  (/ (inc (Math/sqrt (inc (* 24 x)))) 6))

(defn p? [x]
  (numb/natural? (p-index x)))

(defn t-index [x]
  (/ (dec (Math/sqrt (inc (* 8 x)))) 2))

(defn t? [x]
  (numb/natural? (t-index x)))

(let [rh (map H (drop (inc 143) (range)))]
  (->> rh
       (filter #(and (t? %) (p? %)))
       (first)))
