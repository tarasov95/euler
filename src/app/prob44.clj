(ns app.prob44
  (:require
   [lib.numb :as numb]
   [clojure.core.reducers :as r]))

;; https://projecteuler.net/problem=44

;; Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
;; 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
;; It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
;; Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

;; Pn=n(3n−1)/2.
;; 2*Pn=n(3n−1) ~> 3n^2 - n - 2P = 0.
;; https://en.wikipedia.org/wiki/Quadratic_equation

(defn pent-index [x]
  (/ (inc (Math/sqrt (inc (* 24 x)))) 6))

(defn pent? [x]
  (numb/natural? (pent-index x)))

(defn pent [n]
  (/ (* n (- (* 3 n) 1)) 2))

(defn pents
  ([] (map pent (drop 1 (range))))
  ([start end]
   (map pent (range start (inc end)))))

(defn red-min [n select rg]
  (if (empty? rg)
    nil
    {:z (reduce min (map select rg))
     :n n
     :s&d rg}))

(defn find-sum&dif [n]
  (let [rl (pents 1 (pent-index (/ n 2))) ;;numbers above n/2 already covered by previous checks
        ru (pents (int (pent-index n)) (pent-index (* n 2))) ;;above 2nthe difference is definitely bigger than |1-n|
        dif (fn [x] (Math/abs (- x n)))
        flt (fn [x] (and (pent? (+ x n))
                         (pent? (dif x))))]
    (->> (concat
          (filter flt rl)
          (filter flt ru))
         (red-min n dif))))

(defn solve []
  (->> (pents)
       (map find-sum&dif)
       (filter #(not= nil %))
       (first)))

(time (solve))

